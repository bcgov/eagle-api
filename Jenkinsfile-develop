#!/usr/bin/env groovy

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import java.util.regex.Pattern

/*
 * Sends a rocket chat notification
 */
def notifyRocketChat(text, url) {
  def rocketChatURL = url
  def message = text.replaceAll(~/\'/, "")
  def payload = JsonOutput.toJson([
    "username":"Jenkins",
    "icon_url":"https://wiki.jenkins.io/download/attachments/2916393/headshot.png",
    "text": message
  ])
  try {
    def rocketChatURL;
  if (target == 'deploy') {
    rocketChatURL = ROCKET_DEPLOY_WEBHOOK
  } else if (target == 'qa') {
    rocketChatURL = ROCKET_QA_WEBHOOK
  }
    sh("curl -X POST -H 'Content-Type: application/json' --data \'${payload}\' ${rocketChatURL}")
  } catch (error) {
    echo "Error posting Rocket Chat message: ${error}"
  }
}

// Print stack trace of error
@NonCPS
private static String stackTraceAsString(Throwable t) {
    StringWriter sw = new StringWriter();
    t.printStackTrace(new PrintWriter(sw));
    return sw.toString()
}

def _openshift(String name, String project, Closure body) {
  script {
    openshift.withCluster() {
      openshift.withProject(project) {
        echo "Running Stage '${name}'"
        waitUntil {
          boolean isDone=false
          try {
            body()
            isDone=true
            echo "Completed Stage '${name}'"
          } catch (error) {
            echo "${stackTraceAsString(error)}"
            def inputAction = input(
              message: "This step (${name}) has failed. See related messages:",
              ok: 'Confirm',
              parameters: [
                choice(
                  name: 'action',
                  choices: 'Re-run\nIgnore',
                  description: 'What would you like to do?'
                )
              ]
            )

            if ('Ignore'.equalsIgnoreCase(inputAction)) {
              notifyRocketChat(
                "@all The build ${env.BUILD_DISPLAY_NAME} of eagle-api-pr, seems to be broken.\n ${env.RUN_DISPLAY_URL}\n Error: \n ${error.message}",
                'deploy'
              )
              isDone=true
            }
          }
          return isDone
        }
      }
    }
  }
}

/*
 * takes in a sonarqube status json payload
 * and returns the status string
 */
def sonarGetStatus (jsonPayload) {
  def jsonSlurper = new JsonSlurper()
  return jsonSlurper.parseText(jsonPayload).projectStatus.status
}

/*
 * takes in a sonarqube status json payload
 * and returns the date string
 */
def sonarGetDate (jsonPayload) {
  def jsonSlurper = new JsonSlurper()
  return jsonSlurper.parseText(jsonPayload).projectStatus.periods[0].date
}

boolean sonarqubeReportComplete ( String oldDate, String sonarqubeStatusUrl, def iterations = 6 ) {
  def oldSonarqubeReportDate = oldDate
  def newSonarqubeReportDate = sonarGetDate ( sh ( returnStdout: true, script: "curl -w '%{http_code}' '${sonarqubeStatusUrl}'" ) )
  int delay = 0

  for (int i=0; i<iterations; i++) {
    echo "waiting for sonarqube report, iterator is: ${i}, max iterator is: ${iterations} \n Old Date: ${oldSonarqubeReportDate} \n New Date: ${newSonarqubeReportDate}"
    if (oldSonarqubeReportDate != newSonarqubeReportDate) {
      echo "sonarqube report complete"
      return true
    } else {
      delay = (1<<i) // exponential backoff
      sleep(delay)
      newSonarqubeReportDate = sonarGetDate ( sh ( returnStdout: true, script: "curl -w '%{http_code}' '${sonarqubeStatusUrl}'" ) )
    }
  }
  return false
}

/*
 * Updates the global pastBuilds array: it will iterate recursively
 * and add all the builds prior to the current one that had a result
 * different than 'SUCCESS'.
 */
def buildsSinceLastSuccess(previousBuild, build) {
  if ((build != null) && (build.result != 'SUCCESS')) {
    pastBuilds.add(build)
    buildsSinceLastSuccess(pastBuilds, build.getPreviousBuild())
  }
}

/*
 * Generates a string containing all the commit messages from
 * the builds in pastBuilds.
 */
@NonCPS
def getChangeLog(pastBuilds) {
  def log = ""
  for (int x = 0; x < pastBuilds.size(); x++) {
    for (int i = 0; i < pastBuilds[x].changeSets.size(); i++) {
      def entries = pastBuilds[x].changeSets[i].items
      for (int j = 0; j < entries.length; j++) {
        def entry = entries[j]
        log += "* ${entry.msg} by ${entry.author} \n"
      }
    }
  }
  return log;
}

def sonarQubeJenkinsNode () {
  _openshift(env.STAGE_NAME, TOOLSPROJECT) {
    node('test') {
        checkout scm
        dir('sonar-runner') {
          try {
            // run scan
            sh "npm install typescript"
            sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL_INT} -Dsonar.verbose=true --stacktrace --info"

            // check if sonarqube passed
            SONARQUBE_STATUS_URL = "${SONARQUBE_URL_EXT}/api/qualitygates/project_status?projectKey=org.sonarqube%3Aeagle-api"

            boolean firstScan = false;
            def OLD_SONAR_DATE
            try {
              // get old sonar report date
              def OLD_SONAR_DATE_JSON = sh(returnStdout: true, script: "curl -w '%{http_code}' '${SONARQUBE_STATUS_URL}'")
              OLD_SONAR_DATE = sonarGetDate (OLD_SONAR_DATE_JSON)
            } catch (error) {
              firstScan = true
            }

            if ( !firstScan ) {
              // wiat for report to be updated
              if ( !sonarqubeReportComplete ( OLD_SONAR_DATE, SONARQUBE_STATUS_URL ) ) {
                echo "sonarqube report failed to complete, or timed out"

                notifyRocketChat(
                  "@all The latest build, ${env.BUILD_DISPLAY_NAME} of eagle-api seems to be broken. \n ${env.RUN_DISPLAY_URL}\n Error: \n sonarqube report failed to complete, or timed out : ${SONARQUBE_URL}",
                  'deploy'
                )

                currentBuild.result = "FAILURE"
                throw new Exception("sonar timed out or failedz")
              }
            } else {
              sleep (30)
            }

            SONARQUBE_STATUS_JSON = sh(returnStdout: true, script: "curl -w '%{http_code}' '${SONARQUBE_STATUS_URL}'")
            SONARQUBE_STATUS = sonarGetStatus (SONARQUBE_STATUS_JSON)
            echo "${SONARQUBE_STATUS}"
            if ( "${SONARQUBE_STATUS}" == "ERROR") {
              echo "Scan Failed"

              notifyRocketChat(
                "@all The latest build ${env.BUILD_DISPLAY_NAME} of eagle-api seems to be broken. \n ${env.RUN_DISPLAY_URL}\n Error: \n ${error.message}",
                'deploy'
              )

              currentBuild.result = 'FAILURE'
            } else {
              echo "Scan Passed"
            }
          } catch (error) {
            notifyRocketChat(
              "@all The latest build ${env.BUILD_DISPLAY_NAME} of eagle-api seems to be broken. \n ${env.BUILD_URL}\n Error: \n ${error.message}",
              'deploy'
            )
            throw error
          } finally {
            echo "Scan Complete"
          }
        }
      }
      return true;
  }
}

def checkForPRDeployment() {
  def dcCount = 999;
  _openshift(env.STAGE_NAME, TOOLSPROJECT) {
    try {
      dcCount = openshift.selector('bc', "${PR_NAME}-eagle-api").count()
    } catch (error) {
      echo "${stackTraceAsString(error)}"
      dcCount = 0
    }
    echo "count: ${dcCount}"
  }
  if (dcCount == 0) {
    echo "no deployments, return false"
    return false
  } else {
    return true
  }
}

def createFullPRDeployment() {
  openshift.withCluster() {
    echo "Configuring deployment scripts"
    try {
      sh '''
        if [ -d "eagle-helper-pods" ]
        then
          echo "stale helper pods checkout, removing it"
          rm -rf eagle-helper-pods
        fi
        git clone https://github.com/bcgov/eagle-helper-pods
        cd eagle-helper-pods/openshift/setup-teardown/

          # set project to PR deployment template folder
        find . -name "projectset.config" -exec sed -i -e "s/^\\( *TARGET_PROJECT_SET=*\\)[^ ]*\\(.*\\)*$/\\1PR\\2/" {} \\;

          # set unique name (ie. pr-branchName) for pr builds & deployments
        cd params/CUSTOM_SETTINGS/PR
        find . -name "*.config" -exec sed -i -e "s/pr-placeholder/${PR_NAME}/g" {} \\;
         # set api vars to pr fork
        cd api
        find . -name "*.config" -exec sed -i -e "s/branch-placeholder/${PR_NAME}/g" {} \\;
        find . -name "*.config" -exec sed -i -e "s/fork-placeholder/${PR_FORK}/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/fork-placeholder/${PR_FORK}/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/pr-placeholder/${PR_NAME}/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/branch-placeholder/${PR_NAME}/g" {} \\;

          # set api, admin to bcgov/develop
        cd ../public
        find . -name "*.config" -exec sed -i -e "s/branch-placeholder/develop/g" {} \\;
        find . -name "*.config" -exec sed -i -e "s/fork-placeholder/bcgov/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/fork-placeholder/bcgov/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/pr-placeholder/${PR_NAME}/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/branch-placeholder/develop/g" {} \\;

        cd ../admin
        find . -name "*.config" -exec sed -i -e "s/branch-placeholder/develop/g" {} \\;
        find . -name "*.config" -exec sed -i -e "s/fork-placeholder/bcgov/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/fork-placeholder/bcgov/g" {} \\;
        find . -name "*.params" -exec sed -i -e "s/pr-placeholder/${PR_NAME}/g" {} \\;```
        find . -name "*.params" -exec sed -i -e "s/branch-placeholder/develop/g" {} \\;

        cd ../api/dev
        find . -name "*.params" -exec sed -i -e "s/TAG_NAME=dev/TAG_NAME=${PR_NAME}/g" {} \\;

        # create builds and deploys
        cd ../../../../..
        ./setup-all.sh
        # switch back to tools project,
        oc project ${TOOLSPROJECT}
      '''
      echo "deployment scripts configured and PR env created"
    } catch (error) {
      notifyRocketChat(
        "@all The build ${env.BUILD_DISPLAY_NAME} of eagle-api dev-pr, seems to be broken.\n ${env.RUN_DISPLAY_URL}\n Error: \n ${error.message}",
        'deploy'
      )
      currentBuild.result = 'FAILURE'
      throw new Exception("Full PR env deployment failed")
    }
  }
}

def cleanUpPR() {
  openshift.withCluster() {
    echo "Configuring deployment scripts for teardown"
    try {
      sh '''
        if [ -d "eagle-helper-pods" ]
        then
          echo "stale helper pods checkout, removing it"
          rm -rf eagle-helper-pods
        fi
        git clone https://github.com/bcgov/eagle-helper-pods
        cd eagle-helper-pods/openshift/setup-teardown/

            # set project to PR deployment template folder
        find . -name "projectset.config" -exec sed -i -e "s/^\\( *TARGET_PROJECT_SET=*\\)[^ ]*\\(.*\\)*$/\\1PR\\2/" {} \\;

            # set to unique name (ie. branchName-appName) for pr builds & deployments
        cd params/CUSTOM_SETTINGS/PR
        find . -name "*.params" -exec sed -i -e "s/pr-placeholder/${PR_NAME}/g" {} \\;
        find . -name "*.config" -exec sed -i -e "s/pr-placeholder/${PR_NAME}/g" {} \\;

        cd ../../../
        ./teardown-all.sh

            # switch back to tools project,
        oc project ${TOOLSPROJECT}
      '''
      echo "Template scripts configured and PR env removed"
    } catch (error) {
      notifyRocketChat(
       "@all The cleanup ${env.BUILD_DISPLAY_NAME} of eagle ${PR_NAME} deployment may have failed.\n ${env.RUN_DISPLAY_URL}\n Error: \n ${error.message}",
       'deploy'
      )
      throw new Exception("Full PR env teardown failed: ${error}")
    }
  }
}

def cleanUpLock() {
  def manager = org.jenkins.plugins.lockableresources.LockableResourcesManager.get()
  def resources = manager.getResources().findAll{
    !it.locked && it.name.equalsIgnoreCase(lockName)
  }
  resources.each{
    manager.getResources().remove(it)
    echo "Removing lock: ${lockName}"
  }
  manager.save()
}

def CHANGELOG = "No new changes"
def IMAGE_HASH = "latest"
def lockName = "eagle-api-${env.JOB_NAME}-${env.BUILD_NUMBER}"
pipeline {
  environment {
    TOOLSPROJECT = "esm"
    DEVPROJECT = "esm-dev"
    PR_NAME = "${env.CHANGE_BRANCH}".toLowerCase()
    PR_FORK = "${env.CHANGE_FORK}"
    SONARQUBE_URL_INT = 'http://sonarqube:9000'
    SONARQUBE_URL_EXT = "https://sonarqube-${TOOLSPROJECT}.pathfinder.gov.bc.ca"
  }
  agent any
  stages {
    stage('Build Init') {
      steps {
        script {
          openshift.setLockName(lockName)
        }
      }
    }

    stage('Sonarqube') {
     steps {
       script {
         echo "Running Sonarqube"
         def result = sonarQubeJenkinsNode()
       }
     }
    }

    stage('Setup PR env') {
      steps {
        script {
          try {
            sh("oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm")
          } catch (error) {
            echo "Error retrieving Rocket Chat token"
          }
          echo "Source fork: ${PR_FORK}"
          if (!checkForPRDeployment()) {
            // env hasn't been created, call setup scripts
            echo "Deploying PR Environment"
            createFullPRDeployment()
          } else {
            echo "Deployment for this PR already exists, skipping deploy all"
            // modify bc to point at proper fork-branch, then continue to build step
            _openshift(env.STAGE_NAME, TOOLSPROJECT) {
              openshift.patch(
                "bc/${PR_NAME}-eagle-api",
                '\'{"spec":{"source":{"git":{"ref": "${PR_NAME}", "uri": "https://github.com/${PR_FORK}/eagle-api"}}}}\''
              )
            }
          }
        }
      }
    }

    stage('Build') {
      agent any
      steps {
        script {
          pastBuilds = []
          buildsSinceLastSuccess(pastBuilds, currentBuild);
          CHANGELOG = getChangeLog(pastBuilds);

          echo ">>>>>>Changelog: \n ${CHANGELOG}"
          _openshift(env.STAGE_NAME, TOOLSPROJECT) {
            timeout(10) {
              try {
                sh("oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm")
                ROCKET_DEPLOY_WEBHOOK = sh(returnStdout: true, script: 'cat rocket-deploy-webhook')
                ROCKET_QA_WEBHOOK = sh(returnStdout: true, script: 'cat rocket-qa-webhook')
              } catch (error) {
                echo "Error retrieving Rocket Chat token"
              }

              echo "Building eagle-api ${PR_NAME} branch"
              // trigger and wait for s2i build to complete
              def bcObj1 = openshift.selector('bc', "${PR_NAME}-eagle-api")
              bcObj1.startBuild()
              def buildSelector1 = bcObj1.narrow("bc").related("builds")
              buildSelector1.untilEach(1) {
                return (it.object().status.phase == "Complete")
              }

              echo "Build done"

              echo ">>> Get Image Hash"
              // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
              // Tag the images for deployment based on the image's hash
              IMAGE_HASH = sh (
                script: """oc get istag ${PR_NAME}-eagle-api:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
                returnStdout: true).trim()
              echo ">> IMAGE_HASH: ${IMAGE_HASH}"
            }
          }
        }
      }
    }

    stage('Deploy'){
      agent any
      steps {
        script {
          try {
            openshift.withCluster() {
              openshift.withProject(TOOLSPROJECT) {
                echo "Deploying to dev env..."
                openshift.tag("${TOOLSPROJECT}/${PR_NAME}-eagle-api:latest", "${TOOLSPROJECT}/${PR_NAME}-eagle-api:${PR_NAME}")
                echo "Tagged ${TOOLSPROJECT}/${PR_NAME}-eagle-api:latest as ${TOOLSPROJECT}/${PR_NAME}-eagle-api:${PR_NAME}"
              }

              openshift.withProject(DEVPROJECT) {
                def dcObj = openshift.selector('dc', "${PR_NAME}-eagle-api")
                dcObj.rollout().status()
                echo ">>>> Deployment Complete"

                
                notifyRocketChat(
                  "A new version of eagle-api ${PR_NAME} is now in Dev, build: ${env.BUILD_DISPLAY_NAME} \n Changes: \n ${CHANGELOG}",
                  'deploy'
                )
                notifyRocketChat(
                  "@all A new version of eagle-api is now in Dev and ready for QA. \n Changes to Dev: \n ${CHANGELOG}",
                  'qa'
                )
              }
            }
          } catch (error) {
            notifyRocketChat(
              "@all The build ${env.BUILD_DISPLAY_NAME} of eagle-api, seems to be broken.\n ${env.RUN_DISPLAY_URL}\n Error: \n ${error.message}",
              'deploy'
            )
            currentBuild.result = "FAILURE"
            throw new Exception("Deploy failed")
          }
        }
      }
    }

    stage("Populate Data"){
      steps {
        script {
          try {
            openshift.withCluster() {
              openshift.withProject(DEVPROJECT) {
                echo "Running data generators"
                /* Get the Deployment Config (DC) Object */
                def dcObj = openshift.selector("dc", "${PR_NAME}-eagle-api").object()
                
                /* Use the DC to find the pods */
                def podSelector = openshift.selector("pod", [deployment: "${PR_NAME}-eagle-api-${dcObj.status.latestVersion}"])
                
                podSelector.withEach {
                    // obtain the pod name and remove "pods/" from the front.
                    def podName = it.name()
                    podName = podName.replaceFirst("pod/", "")

                    // Run a command in the container
                    openshift.exec("-n", "${DEVPROJECT}", podName, "scl", "enable", "rh-nodejs10", '"/opt/app-root/src/generate.sh 20 Static Saved Single"')
                }
              }
            }
          } catch (error) {
            notifyRocketChat(
              "@all Data generation failed for the build ${env.BUILD_DISPLAY_NAME} of eagle-api.\n ${env.RUN_DISPLAY_URL}\n Error: \n ${error.message}",
              'deploy'
            )
            currentBuild.result = "FAILURE"
            throw new Exception("Data generation failed")
          }
        }
      }
    }

    stage('Cleanup') {
      steps {
        script {
          echo "Removing pipeline lock and cleaning up deployment"
          def inputAction = input(
            message: "Are you ready to cleanup ${PR_NAME} deployment?",
            ok: 'Confirm',
            parameters: [
              choice(
                name: 'action',
                choices: 'Clean-up\nIgnore',
                description: 'What would you like to do?'
              )
            ]
          )
          if ('Clean-up'.equalsIgnoreCase(inputAction)) {
            cleanUpLock(lockName)
            cleanUpPR()
            echo "Cleanup of ${PR_NAME} deployment is complete"
          }
        }
      }
    }
  }

  post {
    success {
      echo 'Build and deploy complete'
    }
    failure {
      echo 'Something went wrong, check deploy and builds'
    }
  }
}
