kind: Template
apiVersion: v1
metadata:
  name: ${NAME}
objects:
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the minio server
      generation: 1
      labels:
        app: ${GROUP_NAME}
        role: ${ROLE_NAME}-${GROUP_NAME}
      name: ${NAME}
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ${GROUP_NAME}
        deploymentconfig: ${NAME}
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${GROUP_NAME}
            role: ${ROLE_NAME}-${GROUP_NAME}
            deploymentconfig: ${NAME}
        spec:
          containers:
            - env:
                - name: MINIO_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: MINIO_ACCESS_KEY
                      name: ${NAME}-keys
                - name: MINIO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: MINIO_SECRET_KEY
                      name: ${NAME}-keys
                - name: MINIO_CONFIG_DIR
                  value: /tmp
                - name: MINIO_DATA_DIR
                  value: ${MINIO_DATA_DIR}
              image: ${OPENSHIFT_REGISTRY}/${MINIO_IMAGE_NAMESPACE}/${MINIO_IMAGE_NAME}:${MINIO_IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              ports:
                - containerPort: 9000
                  protocol: TCP
              resources:
                limits:
                  cpu: 150m
                  memory: 256Mi
                requests:
                  cpu: 50m
                  memory: 128Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /data
                  name: ${NAME}-docs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${NAME}-docs
              persistentVolumeClaim:
                claimName: ${NAME}-docs
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: '${MINIO_IMAGE_NAME}:${MINIO_IMAGE_TAG}'
              namespace: ${MINIO_IMAGE_NAMESPACE}
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-keys
      labels:
        app: ${GROUP_NAME}
    stringData:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${NAME}-docs
      annotations:
        volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
        volume.beta.kubernetes.io/storage-provisioner: ${STORAGE_PROVIDER}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${LOCAL_STORAGE_SIZE}
      storageClassName: ${STORAGE_CLASS}
  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: 9000-tcp
          port: 9000
          protocol: TCP
          targetPort: 9000
      selector:
        deploymentconfig: ${NAME}
      sessionAffinity: None
      type: ClusterIP
    metadata:
      annotations:
        description: Exposes the minio server
      labels:
        app: ${GROUP_NAME}
      name: ${NAME}
  - apiVersion: route.openshift.io/v1
    kind: Route
    spec:
      port:
        targetPort: 9000-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: ${NAME}
        weight: 100
      wildcardPolicy: None
    metadata:
      annotations:
        openshift.io/host.generated: 'true'
      labels:
        app: ${GROUP_NAME}
      name: ${NAME}
parameters:
- name: NAME
  displayName: Name to apply to objects in the template
  value: eagle-api-minio
  required: true
- name: GROUP_NAME
  displayName: Group Name
  description: The name to group all of the frontend objects defined in this template.
  value: eagle-api
  required: true
- name: ROLE_NAME
  displayName: Role Name
  description: The name of the 'role' label for the database deployment.
  value: minio
  required: true
- name: LOCAL_STORAGE_SIZE
  displayName: The size of the local cluster persistent volume claim (recall that minio can optionally mount outside S3)
  value: 2Gi
  required: true
- name: MINIO_ACCESS_KEY
  displayName: Minio access key
  generate: expression
  from: "[a-zA-Z0-9]{8}"
  required: true
- name: MINIO_SECRET_KEY
  displayName: Minio secret key
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: OPENSHIFT_REGISTRY
  displayName: Openshift Registry
  description: The location:port where the Openshift serves images from (eg 'docker-registry.default.svc:5000').
  value: 172.50.0.2:5000
  required: true
- name: MINIO_IMAGE_NAME
  displayName: Minio Image Name
  description: The source minio image.
  value: minio
  required: true
- name: MINIO_IMAGE_NAMESPACE
  displayName: Minio Image Namespace
  description: The source namespace of the minio image.
  value: openshift
  required: true
- name: MINIO_IMAGE_TAG
  displayName: Minio Image Tag
  description: The tag of the minio image.
  value: stable
  required: true
- name: STORAGE_CLASS
  displayName: Storage Class
  description: Storage class to use for physical volume claim.
  value: netapp-file-standard
  required: true
- name: STORAGE_PROVIDER
  displayName: Storage Provider
  description: Storage provider to use for physical volume claim.
  value: kubernetes.io/netapp
  required: true
- name: MINIO_DATA_DIR
  displayName: Minio Data Dir
  description: Data directory for Minio to use. Usually either /data or /opt/minio/data
  value: /opt/minio/data
  required: true