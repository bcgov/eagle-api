{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "${NAME}",
    "labels": {
      "app": "${GROUP_NAME}"
    },
    "annotations": {
      "description": "Template for Node.js applications with a MongoDB database, based on OpenShift provided templates 'nodejs-mongodb-example' and 'mongodb-persistent-template'.",
      "tags": "quickstart,nodejs,mongodb",
      "iconClass": "icon-nodejs"
    }
  },
  "objects": [
    {
      "kind": "Secret",
      "apiVersion": "v1",
      "metadata": {
        "name": "${CHES_SECRET_NAME}",
        "labels": {
          "app": "${GROUP_NAME}"
        }
      },
      "stringData": {
        "CLIENTID": "${CHES_CLIENTID}",
        "CLIENT_SECRET": "${CHES_CLIENT_SECRET}"
      }
    },
    {
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}"
        },
        "name": "${DATABASE_SERVICE_NAME}-data"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "${DATABASE_VOLUME_CAPACITY}"
          }
        }
      }
    },
    {
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}"
        },
        "name": "${NAME}-docs-pvc"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "${DOCUMENT_VOLUME_CAPACITY}"
          }
        }
      }
    },
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}"
        },
        "name": "${NAME}",
        "annotations": {
          "description": "Exposes and load balances the application pods"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "web",
            "port": 3000,
            "targetPort": 3000
          }
        ],
        "selector": {
          "app": "${GROUP_NAME}",
          "name": "${NAME}"
        }
      }
    },
    {
      "kind": "Route",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}"
        },
        "name": "${NAME}"
      },
      "spec": {
        "host": "${APPLICATION_DOMAIN}",
        "to": {
          "kind": "Service",
          "name": "${NAME}"
        },
        "path": "${APPLICATION_DOMAIN_PATH}",
        "port": {
            "targetPort": "web"
        },
        "tls": {
            "termination": "edge"
        },
        "wildcardPolicy": "None"
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}",
          "role": "${API_ROLE_NAME}-${GROUP_NAME}"
        },
        "name": "${NAME}",
        "app": "${GROUP_NAME}",
        "annotations": {
          "description": "Defines how to deploy the application server"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "${APP_IMAGE_NAMESPACE}",
                "name": "${APP_IMAGE_NAME}:${APP_DEPLOYMENT_TAG}"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "app": "${GROUP_NAME}",
          "deploymentconfig": "${NAME}"
        },
        "template": {
          "metadata": {
            "labels": {
              "app": "${GROUP_NAME}",
              "name": "${NAME}",
              "role": "${API_ROLE_NAME}-${GROUP_NAME}",
              "deploymentconfig": "${NAME}"
            },
            "name": "${NAME}"
          },
          "spec": {
            "containers": [
              {
                "name": "${NAME}",
                "image": "${OPENSHIFT_REGISTRY}/${APP_IMAGE_NAMESPACE}/${APP_IMAGE_NAME}:${APP_DEPLOYMENT_TAG}",
                "ports": [
                  {
                    "containerPort": 3000
                  }
                ],
                "env": [
                  {
                    "name": "MONGODB_USERNAME",
                    "value": "${DATABASE_USER}"
                  },
                  {
                    "name": "MONGODB_PASSWORD",
                    "value": "${DATABASE_PASSWORD}"
                  },
                  {
                    "name": "MONGODB_DATABASE",
                    "value": "${DATABASE_NAME}"
                  },
                  {
                    "name": "MONGODB_SERVICE_HOST",
                    "value": "${DATABASE_SERVICE_NAME}"
                  },
                  {
                    "name": "API_HOSTNAME",
                    "value": "${APPLICATION_DOMAIN}"
                  },
                  {
                    "name": "MINIO_HOST",
                    "value": "${MINIO_HOST}"
                  },
                  {
                    "name": "MINIO_ACCESS_KEY",
                    "valueFrom": {
                        "secretKeyRef": {
                            "key": "MINIO_ACCESS_KEY",
                            "name": "${MINIO_SECRET_NAME}"
                        }
                    }
                  },
                  {
                      "name": "MINIO_SECRET_KEY",
                      "valueFrom": {
                          "secretKeyRef": {
                              "key": "MINIO_SECRET_KEY",
                              "name": "${MINIO_SECRET_NAME}"
                          }
                      }
                  },
                  {
                    "name": "CHES_ENDPOINT",
                    "value": "${CHES_ENDPOINT}"
                  },
                  {
                    "name": "GETOK_ENDPOINT",
                    "value": "${GETOK_ENDPOINT}"
                  },
                  {
                    "name": "_GETOK_CLIENT_SECRET",
                    "valueFrom": {
                        "secretKeyRef": {
                            "key": "CLIENT_SECRET",
                            "name": "${CHES_SECRET_NAME}"
                        }
                    }
                  },
                  {
                      "name": "_GETOK_CLIENTID",
                      "valueFrom": {
                          "secretKeyRef": {
                              "key": "CLIENTID",
                              "name": "${CHES_SECRET_NAME}"
                          }
                      }
                  },
                  {
                    "name": "ENABLE_VIRUS_SCANNING",
                    "value": "${ENABLE_VIRUS_SCANNING}"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 3000,
                  "initialDelaySeconds": 3,
                  "httpGet": {
                    "path": "${READINESS_PROBE_URL}",
                    "port": 3000
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 3000,
                  "initialDelaySeconds": 30,
                  "httpGet": {
                    "path": "${READINESS_PROBE_URL}",
                    "port": 3000
                  }
                },
                "resources": {
                  "requests": {
                    "cpu": "${NODEJS_CPU_REQUEST}",
                    "memory": "${NODEJS_MEMORY_REQUEST}"
                  },
                  "limits": {
                    "cpu": "${NODEJS_CPU_LIMIT}",
                    "memory": "${NODEJS_MEMORY_LIMIT}"
                  }
                },
                "volumeMounts": [
                  {
                    "name": "${NAME}-docs",
                    "mountPath": "${DOCUMENTS_BUCKET_PATH}"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "${NAME}-docs",
                "persistentVolumeClaim": {
                  "claimName": "${NAME}-docs-pvc"
                }
              }
            ]
          }
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}"
        },
        "name": "${NAME}-generator",
        "app": "${GROUP_NAME}",
        "annotations": {
          "description": "Defines how to deploy the application server"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${NAME}-generator"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "${APP_IMAGE_NAMESPACE}",
                "name": "${APP_IMAGE_NAME}-generator:${APP_DEPLOYMENT_TAG}"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "app": "${GROUP_NAME}",
          "deploymentconfig": "${NAME}-generator"
        },
        "template": {
          "metadata": {
            "labels": {
              "app": "${GROUP_NAME}",
              "name": "${NAME}-generator",
              "deploymentconfig": "${NAME}-generator"
            },
            "name": "${NAME}-generator"
          },
          "spec": {
            "containers": [
              {
                "name": "${NAME}-generator",
                "image": "${OPENSHIFT_REGISTRY}/${APP_IMAGE_NAMESPACE}/${APP_IMAGE_NAME}-generator:${APP_DEPLOYMENT_TAG}",
                "ports": [
                  {
                    "containerPort": 3000
                  }
                ],
                "env": [
                  {
                    "name": "MONGODB_USERNAME",
                    "value": "${DATABASE_USER}"
                  },
                  {
                    "name": "MONGODB_PASSWORD",
                    "value": "${DATABASE_PASSWORD}"
                  },
                  {
                    "name": "MONGODB_DATABASE",
                    "value": "${DATABASE_NAME}"
                  },
                  {
                    "name": "MONGODB_SERVICE_HOST",
                    "value": "${DATABASE_SERVICE_NAME}"
                  },
                  {
                    "name": "API_HOSTNAME",
                    "value": "${APPLICATION_DOMAIN}"
                  },
                  {
                    "name": "MINIO_HOST",
                    "value": "${MINIO_HOST}"
                  },
                  {
                    "name": "MINIO_ACCESS_KEY",
                    "valueFrom": {
                        "secretKeyRef": {
                            "key": "MINIO_ACCESS_KEY",
                            "name": "${MINIO_SECRET_NAME}"
                        }
                    }
                  },
                  {
                      "name": "MINIO_SECRET_KEY",
                      "valueFrom": {
                          "secretKeyRef": {
                              "key": "MINIO_SECRET_KEY",
                              "name": "${MINIO_SECRET_NAME}"
                          }
                      }
                  },
                  {
                    "name": "CHES_ENDPOINT",
                    "value": "${CHES_ENDPOINT}"
                  },
                  {
                    "name": "GETOK_ENDPOINT",
                    "value": "${GETOK_ENDPOINT}"
                  },
                  {
                    "name": "_GETOK_CLIENT_SECRET",
                    "valueFrom": {
                        "secretKeyRef": {
                            "key": "CLIENT_SECRET",
                            "name": "${CHES_SECRET_NAME}"
                        }
                    }
                  },
                  {
                      "name": "_GETOK_CLIENTID",
                      "valueFrom": {
                          "secretKeyRef": {
                              "key": "CLIENTID",
                              "name": "${CHES_SECRET_NAME}"
                          }
                      }
                  },
                  {
                    "name": "ENABLE_VIRUS_SCANNING",
                    "value": "${ENABLE_VIRUS_SCANNING}"
                  }
                ],
                "resources": {
                  "requests": {
                    "cpu": "${NODEJS_CPU_REQUEST}",
                    "memory": "${NODEJS_MEMORY_REQUEST}"
                  },
                  "limits": {
                    "cpu": "${NODEJS_CPU_LIMIT}",
                    "memory": "${NODEJS_MEMORY_LIMIT}"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "labels": {
          "app": "${GROUP_NAME}",
          "name": "${DATABASE_SERVICE_NAME}"
        },
        "name": "${DATABASE_SERVICE_NAME}",
        "annotations": {
          "description": "Exposes the database server"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "${DATABASE_SERVICE_NAME}",
            "port": 27017,
            "targetPort": 27017
          }
        ],
        "selector": {
          "app": "${GROUP_NAME}",
          "name": "${DATABASE_SERVICE_NAME}"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "labels": {
          "app": "${GROUP_NAME}",
          "name": "${DATABASE_SERVICE_NAME}",
          "role": "${DATABASE_ROLE_NAME}-${GROUP_NAME}"
        },
        "annotations": {
          "description": "Defines how to deploy the database"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${DATABASE_SERVICE_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "${MONGO_IMAGE_NAMESPACE}",
                "name": "${MONGO_IMAGE_NAME}:${MONGO_VER}"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "app": "${GROUP_NAME}",
          "name": "${DATABASE_SERVICE_NAME}"
        },
        "template": {
          "metadata": {
            "labels": {
              "app": "${GROUP_NAME}",
              "name": "${DATABASE_SERVICE_NAME}",
              "role": "${DATABASE_ROLE_NAME}-${GROUP_NAME}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "containers": [
              {
                "name": "${DATABASE_SERVICE_NAME}",
                "image": "${OPENSHIFT_REGISTRY}/${MONGO_IMAGE_NAMESPACE}/${MONGO_IMAGE_NAME}:${MONGO_IMAGE_TAG}",
                "ports": [
                  {
                    "containerPort": 27017
                  }
                ],
                "env": [
                  {
                    "name": "MONGODB_USER",
                    "value": "${DATABASE_USER}"
                  },
                  {
                    "name": "MONGODB_PASSWORD",
                    "value": "${DATABASE_PASSWORD}"
                  },
                  {
                    "name": "MONGODB_DATABASE",
                    "value": "${DATABASE_NAME}"
                  },
                  {
                    "name": "MONGODB_ADMIN_PASSWORD",
                    "value": "${DATABASE_ADMIN_PASSWORD}"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 1,
                  "initialDelaySeconds": 3,
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-i",
                      "-c",
                      "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval='quit()'"
                    ]
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 1,
                  "initialDelaySeconds": 30,
                  "tcpSocket": {
                    "port": 27017
                  }
                },
                "resources": {
                  "requests": {
                    "cpu": "${MONGODB_CPU_REQUEST}",
                    "memory": "${MONGODB_MEMORY_REQUEST}"
                  },
                  "limits": {
                    "cpu": "${MONGODB_CPU_LIMIT}",
                    "memory": "${MONGODB_MEMORY_LIMIT}"
                  }
                },
                "volumeMounts": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "mountPath": "/var/lib/mongodb/data"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "${DATABASE_SERVICE_NAME}-data",
                "persistentVolumeClaim": {
                  "claimName": "${DATABASE_SERVICE_NAME}-data"
                }
              }
            ]
          }
        }
      }
    }
  ],
  "parameters": [
    {
      "name": "NAME",
      "displayName": "Name",
      "description": "The name assigned to all of the frontend objects defined in this template.",
      "required": true,
      "value": "eagle-api"
    },
    {
      "name": "GROUP_NAME",
      "displayName": "Group Name",
      "description": "The name to group all of the frontend objects defined in this template.",
      "required": true,
      "value": "eagle-api"
    },
    {
      "name": "DATABASE_ROLE_NAME",
      "displayName": "Database Role Name",
      "description": "The name of the 'role' label for the database deployment",
      "value": "database"
    },
    {
      "name": "API_ROLE_NAME",
      "displayName": "API Role Name",
      "description": "The name of the 'role' label for the API deployment",
      "value": "api"
    },
    {
      "name": "OPENSHIFT_REGISTRY",
      "displayName": "Openshift Registry",
      "description": "The location:port where the Openshift serves images from (eg 'docker-registry.default.svc:5000').",
      "value": "172.50.0.2:5000"
    },
    {
      "name": "MONGO_IMAGE_NAMESPACE",
      "displayName": "Mongo image namespace",
      "description": "The OpenShift Namespace where the mongo ImageStream resides.",
      "value": "openshift"
    },
    {
      "name": "MONGO_IMAGE_NAME",
      "displayName": "Mongo image name",
      "description": "The OpenShift ImageStream Name for mongo.",
      "value": "mongodb"
    },
    {
      "name": "MONGO_VER",
      "displayName": "Mongo Version Number",
      "description": "The version number of Mongo that matches the version in project file package.json",
      "value": "3.6"
    },
    {
      "name": "NODEJS_CPU_LIMIT",
      "displayName": "CPU Limit",
      "description": "Maximum amount of CPU (in cores) the Node.js container can use.",
      "value": "1"
    },
    {
      "name": "NODEJS_MEMORY_LIMIT",
      "displayName": "Memory Limit",
      "description": "Maximum amount of memory the Node.js container can use.",
      "value": "4Gi"
    },
    {
      "name": "NODEJS_CPU_REQUEST",
      "displayName": "CPU Request",
      "description": "Reserved amount of CPU (in cores) the Node.js container can use.",
      "value": "1"
    },
    {
      "name": "NODEJS_MEMORY_REQUEST",
      "displayName": "Memory Request",
      "description": "Reserved amount of memory the Node.js container can use.",
      "value": "1Gi"
    },
    {
      "name": "MONGODB_CPU_LIMIT",
      "displayName": "CPU Limit",
      "description": "Maximum amount of CPU (in cores) the Node.js container can use.",
      "value": "1"
    },
    {
      "name": "MONGODB_MEMORY_LIMIT",
      "displayName": "Memory Limit",
      "description": "Maximum amount of memory the Node.js container can use.",
      "value": "4Gi"
    },
    {
      "name": "MONGODB_CPU_REQUEST",
      "displayName": "CPU Request",
      "description": "Reserved amount of CPU (in cores) the Node.js container can use.",
      "value": "1"
    },
    {
      "name": "MONGODB_MEMORY_REQUEST",
      "displayName": "Memory Request",
      "description": "Reserved amount of memory the Node.js container can use.",
      "value": "1Gi"
    },
    {
      "name": "APPLICATION_DOMAIN",
      "displayName": "Application Hostname",
      "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
      "value": "eagle-api-your-openshift-namespace.pathfinder.gov.bc.ca"
    },
    {
      "name": "APPLICATION_DOMAIN_PATH",
      "displayName": "Application Hostname Path",
      "description": "The path for this service.",
      "value": "/api"
    },
    {
      "name": "MINIO_HOST",
      "displayName": "Minio Hostname",
      "description": "The exposed hostname to route to the MINIO service",
      "value": "eagle-api-minio-your-openshift-namespace.pathfinder.gov.bc.ca"
    },
    {
      "name": "MINIO_SECRET_NAME",
      "displayName": "Name of the Minio secret",
      "description": "The name of the secrets file for Minio",
      "value": "eagle-api-minio-keys"
    },
    {
      "name": "DATABASE_SERVICE_NAME",
      "displayName": "Database Service Name",
      "value": "eagle-api-mongodb"
    },
    {
      "name": "DATABASE_USER",
      "displayName": "MongoDB Username",
      "description": "Username for MongoDB user that will be used for accessing the database.",
      "generate": "expression",
      "from": "user[A-Z0-9]{3}"
    },
    {
      "name": "DATABASE_PASSWORD",
      "displayName": "MongoDB Password",
      "description": "Password for the MongoDB user.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
    {
      "name": "DATABASE_NAME",
      "displayName": "Database Name",
      "value": "epic"
    },
    {
      "name": "DATABASE_ADMIN_PASSWORD",
      "displayName": "Database Administrator Password",
      "description": "Password for the database admin user.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
    {
      "name": "PORT",
      "displayName": "Application port",
      "description": "Port that application is listening on for requests.",
      "value": "3000",
      "required": true
    },
    {
      "name": "DATABASE_VOLUME_CAPACITY",
      "displayName": "Database Volume Capacity",
      "description": "Volume space available for mongo database.  3Gi or up as we need room for the log files to grow.",
      "value": "5Gi",
      "required": true
    },
    {
      "name": "DOCUMENT_VOLUME_CAPACITY",
      "displayName": "Document Volume Capacity",
      "description": "Volume space available for Document uploads, e.g. 512Mi, 2Gi.",
      "value": "5Gi",
      "required": true
    },
    {
      "name": "APP_IMAGE_NAME",
      "displayName": "Application image name.",
      "description": "The image that was built in a previous build step and is available to deploy.",
      "value": "eagle-api",
      "required": true
    },
    {
      "name": "APP_IMAGE_NAMESPACE",
      "displayName": "Namespace containing application images.",
      "description": "The tools namespace where builds occur and images are available to pull from.",
      "value": "your-tools-namespace",
      "required": true
    },
    {
      "name": "APP_DEPLOYMENT_TAG",
      "displayName": "Image tag to watch for changes and trigger deployment.",
      "description": "Image tag to watch for changes and trigger deployment. Eg: dev",
      "value": "your-openshift-tag",
      "required": true
    },
    {
      "name": "READINESS_PROBE_URL",
      "displayName": "URL to watch for readiness.",
      "description": "A health check will fail if after a certain time this isn't being served.",
      "value": "/api/docs",
      "required": true
    },
    {
      "name": "DOCUMENTS_BUCKET_PATH",
      "displayName": "Documents Bucket Path",
      "description": "Minio bucket where documents will be uploaded to.",
      "value": "/opt/app-root/src/uploads",
      "required": true
    },
    {
      "name": "CHES_ENDPOINT",
      "displayName": "CHES Hostname",
      "description": "The exposed hostname to route to the CHES email service",
      "value": "https://ches-no-exist-dev.pathfinder.gov.bc.ca/"
    },
    {
      "name": "GETOK_ENDPOINT",
      "displayName": "GETOK endpoint",
      "description": "The exposed endpoint to route to the GETOK service",
      "value": "https://dev.oidc.gov.bc.ca/auth/realms/jbd6rnxw/protocol/openid-connect/token"
    },
    {
      "name": "CHES_SECRET_NAME",
      "displayName": "Name of the CHES secret",
      "description": "The name of the secrets file for CHES",
      "value": "getok-secret"
    },
    {
      "name": "CHES_CLIENTID",
      "displayName": "The CHES client id credential",
      "description": "The client ID for CHES access",
      "value": "a-client-id"
    },
    {
      "name": "CHES_CLIENT_SECRET",
      "displayName": "The CHES secret credential",
      "description": "The secret for CHES",
      "value": "a-client-secret"
    },
    {
      "name": "ENABLE_VIRUS_SCANNING",
      "displayName": "Virus Scanning",
      "description": "Boolean string to enable or disable virus scanning.",
      "value": "false"
    },
    {
      "name": "SSO_ISSUER",
      "displayName": "URI to SSO realm",
      "description": "URI to SSO realm",
      "value": "https://oidc.gov.bc.ca/auth/realms/eagle"
    },
    {
      "name": "SSO_JWKSURI",
      "displayName": "Uri to sso certs",
      "description": "Uri to sso certs",
      "value": "https://oidc.gov.bc.ca/auth/realms/eagle/protocol/openid-connect/certs"
    }
  ]
}
